name: Deploy

on:
  workflow_call:
    inputs:
      version:
        description: '部署版本'
        default: 'master'
        type: string
        required: false
      domain:
        description: '部署域名'
        type: string
        required: true
    secrets:
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true
      SSH_KEY:
        required: true
      SSH_PORT:
        required: true
      GHCR_READ_TOKEN:
        required: true
      DYUPS_SERVER:
        required: true
      DYUPS_TOKEN:
        required: true
      GHCR_MIRROR:
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: '部署版本'
        default: 'master'
        type: string
        required: false
      domain:
        description: '部署域名'
        default: 'echo.xuexb.com'
        type: string
        required: false

env:
  REPO: ${{ github.repository }}
  IMAGE_VERSION: ${{ inputs.version || github.event.inputs.version }}
  MIRROR_REPOSITORY_TAG: ${{ secrets.GHCR_MIRROR }}/${{ github.repository }}:${{ inputs.version || github.event.inputs.version }}
  OWNER: xuexb
  DOMAIN: ${{ inputs.domain || github.event.inputs.domain }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check_version.outputs.HTTP_CODE }}
    steps:
      - name: Generate Token
        id: generate_token
        run: |
          TOKEN=`curl -su ${{ env.OWNER }}:${{ secrets.GHCR_READ_TOKEN }} https://ghcr.io/token\?scope\="repository:${{ env.REPO }}:pull" | awk -F '"' '{print $4}'`
          echo "::set-output name=GHCR_PULL_TOKEN::$TOKEN"
      - name: Check version
        id: check_version
        if: ${{ steps.generate_token.conclusion == 'success' }}
        run: |
          HTTP_CODE=`curl -sL -w '%{http_code}' --connect-timeout 5 -H 'Authorization: Bearer ${{ steps.generate_token.outputs.GHCR_PULL_TOKEN }}' https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} -o /dev/null`
          if [ "$HTTP_CODE" == "200" ]; then
            echo "::set-output name=HTTP_CODE::$HTTP_CODE"
          else
            echo "curl https://ghcr.io/v2/${{ env.REPO }}/manifests/${{ env.IMAGE_VERSION }} Response => $HTTP_CODE"
            exit 1
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.result == '200' }}
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }} 
          known_hosts: unnecessary
      - name: Deploy
        id: deploy
        timeout-minutes: 30
        run: |
          # 生成文件部署文件
          echo '#!/bin/bash
          docker pull ${{ env.MIRROR_REPOSITORY_TAG }} > /dev/null 2>&1 \
            && (docker ps -aq --filter "name=${{ env.DOMAIN }}" | xargs docker rm -f || echo "Delete fail") > /dev/null 2>&1 \
            && docker run \
                -p 8080 \
                --rm \
                -d \
                --name "${{ env.DOMAIN }}" \
                ${{ env.MIRROR_REPOSITORY_TAG }} > /dev/null 2>&1 \
            && ip=$(curl -s --max-time 5 ifconfig.me) \
            && port=$(docker ps --filter "name=${{ env.DOMAIN }}" --format "{{.Ports}}" -a | awk -F ":" "{print \$2}" | awk -F "->" "{print \$1}") \
            && if [ "$ip" == "" ]; then exit 1; fi \
            && if [ "$port" == "" ]; then exit 2; fi \
            && httpcode=`curl -sL -w '%{http_code}' --connect-timeout 3 "127.0.0.1:$port/?r=$RANDOM" -o /dev/null` \
            && if [ "$httpcode" != "200" ]; then exit 3; fi \
            && echo "{\"address\":\"$ip\",\"port\":$port}"
          ' > agent.sh
          host=${{ secrets.SSH_HOST }}
          hosts=(${host//,/ })
          result=""
          for key in "${hosts[@]}"; do
            res=$(ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no "${{ secrets.SSH_USERNAME }}@$key" 'bash -s' < agent.sh)
            code=$?
            if [ "$code" != "0" ]; then
              echo "$key 部署失败，状态码：$code ，信息：$res"
            else
              if [ "$result" == "" ]; then
                result="$res"
              else
                result="$result,$res"
              fi
            fi
          done
          if [ "$result" == "" ]; then
            echo "没有部署成功"
            exit 1
          fi
          result="[$result]"
          echo "::set-output name=result::$result"
      - name: Bind dyups
        timeout-minutes: 5
        run: |
            # 注册 dyups ，会自动同步
            dyupsurl="${{ secrets.DYUPS_SERVER }}/api/${{ env.DOMAIN }}?r=$RANDOM"
            httpcode=$(curl -sL -w '%{http_code}' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' -X POST -d '${{ steps.deploy.outputs.result }}' $dyupsurl -o /dev/null)
            if [ "$httpcode" != "200" ]; then
              echo "注册 dyups 失败，响应码：$httpcode"
              exit 1
            fi
  test:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    steps:
      - name: Test
        timeout-minutes: 1
        run: |
          httpcode=`curl -sL -w '%{http_code}' --connect-timeout 5 https://${{ env.DOMAIN }} -o /dev/null`
          if [ "$httpcode" != "200" ]; then
            echo "访问 dyups WLB 错误，响应码：$httpcode"
            exit 1
          fi